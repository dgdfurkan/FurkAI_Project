// Service Worker kaydƒ±
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/FurkAI_Project/sw.js')
            .then((registration) => {
                console.log('SW registered: ', registration);
            })
            .catch((registrationError) => {
                console.log('SW registration failed: ', registrationError);
            });
    });
}

// DOM elementleri
const requestPermissionBtn = document.getElementById('requestPermission');
const permissionStatus = document.getElementById('permissionStatus');
const notificationForm = document.getElementById('notificationForm');
const savedNotifications = document.getElementById('savedNotifications');
const testNotificationBtn = document.getElementById('testNotification');
const currentReminders = document.getElementById('currentReminders');
const refreshRemindersBtn = document.getElementById('refreshReminders');

// Bildirim izni kontrol√º
function checkNotificationPermission() {
    // iPhone Safari i√ßin √∂zel kontrol
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isSafari = /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);
    
    if (isIOS && isSafari) {
        // iPhone Safari i√ßin ger√ßek bildirim sistemi
        if ('Notification' in window) {
            const permission = Notification.permission;
            if (permission === 'granted') {
                permissionStatus.innerHTML = '<div class="status success">‚úÖ iPhone Safari bildirim izni verildi! Ger√ßek push bildirimleri aktif.</div>';
                requestPermissionBtn.style.display = 'none';
            } else if (permission === 'denied') {
                permissionStatus.innerHTML = `
                    <div class="status error">
                        ‚ùå iPhone Safari bildirim izni reddedildi<br><br>
                        <strong>√á√∂z√ºm:</strong><br>
                        1. iPhone Ayarlar > Safari > Web Sitesi Ayarlarƒ±<br>
                        2. Bildirimler b√∂l√ºm√ºne gidin<br>
                        3. Bu site i√ßin "ƒ∞zin Ver" se√ßin<br>
                        4. Sayfayƒ± yenileyin
                    </div>
                `;
                requestPermissionBtn.style.display = 'block';
                requestPermissionBtn.textContent = 'iPhone Ayarlarƒ±';
            } else {
                permissionStatus.innerHTML = `
                    <div class="status info">
                        üì± iPhone Safari Push Bildirimleri<br><br>
                        <strong>Ger√ßek bildirimler i√ßin izin verin!</strong><br>
                        WhatsApp gibi bildirimler alacaksƒ±nƒ±z.<br><br>
                        <strong>Not:</strong> iPhone Safari'de bazen bildirimler gecikebilir.
                    </div>
                `;
                requestPermissionBtn.style.display = 'block';
                requestPermissionBtn.textContent = 'Bildirim ƒ∞zni Ver';
            }
        } else {
            permissionStatus.innerHTML = '<div class="status error">‚ùå Bu iPhone Safari s√ºr√ºm√º bildirimleri desteklemiyor</div>';
            requestPermissionBtn.style.display = 'none';
        }
        return;
    }
    
    if ('Notification' in window) {
        const permission = Notification.permission;
        if (permission === 'granted') {
            permissionStatus.innerHTML = '<div class="status success">‚úÖ Bildirim izni verildi! Ger√ßek push bildirimleri aktif.</div>';
            requestPermissionBtn.style.display = 'none';
        } else if (permission === 'denied') {
            permissionStatus.innerHTML = '<div class="status error">‚ùå Bildirim izni reddedildi. Tarayƒ±cƒ± ayarlarƒ±ndan izin verin.</div>';
            requestPermissionBtn.style.display = 'none';
        } else {
            permissionStatus.innerHTML = '<div class="status info">‚ÑπÔ∏è Ger√ßek push bildirimleri i√ßin izin verin</div>';
            requestPermissionBtn.style.display = 'block';
            requestPermissionBtn.textContent = 'Bildirim ƒ∞zni Ver';
        }
    } else {
        permissionStatus.innerHTML = '<div class="status error">‚ùå Bu tarayƒ±cƒ± push bildirimleri desteklemiyor</div>';
        requestPermissionBtn.style.display = 'none';
    }
}

// Bildirim izni isteme
requestPermissionBtn.addEventListener('click', async () => {
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isSafari = /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);
    
    if (isIOS && isSafari) {
        // iPhone Safari i√ßin ger√ßek bildirim izni isteme
        if ('Notification' in window) {
            try {
                const permission = await Notification.requestPermission();
                if (permission === 'granted') {
                    alert('‚úÖ Bildirim izni verildi! Artƒ±k WhatsApp gibi ger√ßek push bildirimleri alacaksƒ±nƒ±z.');
                    checkNotificationPermission();
                } else if (permission === 'denied') {
                    alert('‚ùå Bildirim izni reddedildi. iPhone Ayarlar > Safari > Web Sitesi Ayarlarƒ± > Bildirimler\'den manuel olarak izin verin.');
                    checkNotificationPermission();
                }
            } catch (error) {
                alert('iPhone Safari\'de bildirim izni i√ßin:\n\n1. iPhone Ayarlar > Safari > Web Site Ayarlarƒ±\n2. Bildirimler b√∂l√ºm√ºne gidin\n3. Bu site i√ßin "ƒ∞zin Ver" se√ßin\n4. Sayfayƒ± yenileyin');
            }
        }
        return;
    }
    
    if ('Notification' in window) {
        const permission = await Notification.requestPermission();
        checkNotificationPermission();
    }
});

// Test bildirimi g√∂nderme
testNotificationBtn.addEventListener('click', () => {
    if (Notification.permission === 'granted') {
        // WhatsApp gibi ger√ßek test bildirimi
        const testNotification = new Notification('üîî Test Bildirimi', {
            body: 'Bu bir test bildirimidir! WhatsApp gibi ger√ßek push bildirim.',
            icon: '/FurkAI_Project/icon-192.png',
            badge: '/FurkAI_Project/icon-192.png',
            vibrate: [200, 100, 200, 100, 200], // WhatsApp gibi titre≈üim
            requireInteraction: true, // Otomatik kapanmasƒ±n
            silent: false, // Ses √ßƒ±kar
            tag: 'test-notification',
            data: {
                type: 'test',
                timestamp: Date.now()
            },
            actions: [
                {
                    action: 'view',
                    title: 'G√∂r√ºnt√ºle',
                    icon: '/FurkAI_Project/icon-192.png'
                },
                {
                    action: 'dismiss',
                    title: 'Kapat',
                    icon: '/FurkAI_Project/icon-192.png'
                }
            ]
        });

        // Bildirim tƒ±klama olayƒ±
        testNotification.onclick = function() {
            window.focus();
            testNotification.close();
        };

        // Bildirim g√∂sterildiƒüinde log
        testNotification.onshow = function() {
            console.log('Test bildirimi g√∂sterildi');
        };
    } else {
        alert('√ñnce bildirim izni vermeniz gerekiyor!');
    }
});

// Bildirim formu i≈üleme
notificationForm.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const text = document.getElementById('notificationText').value;
    const time = document.getElementById('notificationTime').value;
    const dayCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');
    
    if (dayCheckboxes.length === 0) {
        alert('En az bir g√ºn se√ßmelisiniz!');
        return;
    }
    
    const days = Array.from(dayCheckboxes).map(cb => parseInt(cb.value));
    
    const notification = {
        id: Date.now(),
        text: text,
        time: time,
        days: days,
        createdAt: new Date().toISOString()
    };
    
    saveNotification(notification);
    displayNotifications();
    
    // Formu temizle
    notificationForm.reset();
    
    alert('Bildirim ba≈üarƒ±yla kaydedildi!');
});

// Bildirimleri localStorage'a kaydetme
function saveNotification(notification) {
    let notifications = JSON.parse(localStorage.getItem('notifications') || '[]');
    notifications.push(notification);
    localStorage.setItem('notifications', JSON.stringify(notifications));
}

// Bildirimleri localStorage'dan y√ºkleme
function loadNotifications() {
    return JSON.parse(localStorage.getItem('notifications') || '[]');
}

// Bildirimleri ekranda g√∂sterme
function displayNotifications() {
    const notifications = loadNotifications();
    
    if (notifications.length === 0) {
        savedNotifications.innerHTML = '<p class="no-notifications">Hen√ºz kayƒ±tlƒ± bildirim yok</p>';
        return;
    }
    
    savedNotifications.innerHTML = notifications.map(notification => {
        const dayNames = ['Pazartesi', 'Salƒ±', '√áar≈üamba', 'Per≈üembe', 'Cuma', 'Cumartesi', 'Pazar'];
        const selectedDays = notification.days.map(day => dayNames[day]).join(', ');
        
        return `
            <div class="notification-item">
                <div class="notification-info">
                    <div class="notification-text">${notification.text}</div>
                    <div class="notification-time">üïê ${notification.time}</div>
                    <div class="notification-days">üìÖ ${selectedDays}</div>
                </div>
                <button class="delete-btn" onclick="deleteNotification(${notification.id})">Sil</button>
            </div>
        `;
    }).join('');
}

// Bildirim silme
function deleteNotification(id) {
    if (confirm('Bu bildirimi silmek istediƒüinizden emin misiniz?')) {
        let notifications = loadNotifications();
        notifications = notifications.filter(n => n.id !== id);
        localStorage.setItem('notifications', JSON.stringify(notifications));
        displayNotifications();
    }
}

// Zamanlanmƒ±≈ü bildirimleri kontrol etme
function checkScheduledNotifications() {
    const notifications = loadNotifications();
    const now = new Date();
    const currentTime = now.getHours().toString().padStart(2, '0') + ':' + now.getMinutes().toString().padStart(2, '0');
    const currentDay = now.getDay();
    
    notifications.forEach(notification => {
        if (notification.time === currentTime && notification.days.includes(currentDay)) {
            // Daha √∂nce bu bildirim g√∂nderilmi≈ü mi kontrol et
            const lastSentKey = `lastSent_${notification.id}_${currentDay}_${currentTime}`;
            const lastSent = localStorage.getItem(lastSentKey);
            const now = Date.now();
            
            // Eƒüer bu bildirim bug√ºn bu saatte daha √∂nce g√∂nderilmemi≈üse
            if (!lastSent || (now - parseInt(lastSent)) > 60000) { // 1 dakika tolerans
                // Ger√ßek push bildirimi g√∂nder
                if (Notification.permission === 'granted') {
                    // WhatsApp gibi ger√ßek bildirim
                    const notificationOptions = {
                        body: notification.text,
                        icon: '/FurkAI_Project/icon-192.png',
                        badge: '/FurkAI_Project/icon-192.png',
                        vibrate: [200, 100, 200, 100, 200], // WhatsApp gibi titre≈üim
                        requireInteraction: true, // Otomatik kapanmasƒ±n
                        silent: false, // Ses √ßƒ±kar
                        tag: `scheduled-${notification.id}-${currentDay}`, // Benzersiz tag
                        data: {
                            notificationId: notification.id,
                            type: 'scheduled',
                            timestamp: now
                        },
                        actions: [
                            {
                                action: 'view',
                                title: 'G√∂r√ºnt√ºle',
                                icon: '/FurkAI_Project/icon-192.png'
                            },
                            {
                                action: 'dismiss',
                                title: 'Kapat',
                                icon: '/FurkAI_Project/icon-192.png'
                            }
                        ]
                    };

                    // Ger√ßek push bildirimi olu≈ütur
                    const pushNotification = new Notification('üîî Zamanlanmƒ±≈ü Bildirim', notificationOptions);
                    
                    // Bildirim tƒ±klama olayƒ±
                    pushNotification.onclick = function() {
                        window.focus();
                        pushNotification.close();
                    };

                    // Bildirim hatasƒ± kontrol√º
                    pushNotification.onerror = function(error) {
                        console.error('Bildirim hatasƒ±:', error);
                    };

                    // Bildirim g√∂sterildiƒüinde log ve kaydet
                    pushNotification.onshow = function() {
                        console.log('Zamanlanmƒ±≈ü bildirim g√∂sterildi:', notification.text);
                        // Bu bildirimin g√∂nderildiƒüini kaydet
                        localStorage.setItem(lastSentKey, now.toString());
                    };
                }
            }
        }
    });
}

// Hatƒ±rlatma fonksiyonlarƒ± kaldƒ±rƒ±ldƒ± - artƒ±k ger√ßek push bildirimler kullanƒ±lƒ±yor

// Her dakika kontrol et - ger√ßek push bildirimler i√ßin
setInterval(checkScheduledNotifications, 60000);

// Sayfa y√ºklendiƒüinde √ßalƒ±≈ütƒ±r
document.addEventListener('DOMContentLoaded', () => {
    checkNotificationPermission();
    displayNotifications();
    
    // PWA kurulumu i√ßin √∂zel mesaj
    let deferredPrompt;
    window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        
        // Kurulum butonu g√∂ster
        const installBtn = document.createElement('button');
        installBtn.textContent = 'üì± Ana Ekrana Ekle';
        installBtn.className = 'btn btn-primary';
        installBtn.style.marginTop = '10px';
        installBtn.addEventListener('click', () => {
            deferredPrompt.prompt();
            deferredPrompt.userChoice.then((choiceResult) => {
                if (choiceResult.outcome === 'accepted') {
                    console.log('PWA kuruldu');
                }
                deferredPrompt = null;
            });
        });
        
        const permissionSection = document.querySelector('.notification-section');
        permissionSection.appendChild(installBtn);
    });
});

// PWA kurulumu tamamlandƒ±ƒüƒ±nda
window.addEventListener('appinstalled', (evt) => {
    console.log('PWA kuruldu');
    alert('Uygulama ana ekranƒ±nƒ±za eklendi!');
});
